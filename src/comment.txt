Последние комментарии от Юры

1) Прокрутка на модальном окне, когда оно полностью помещается во viewport, выглядит немного странно. Также для кнопки закрытия фон выглядит неуместно без внутренних отступов (см. правило "внутренее - внешнее": https://bureau.ru/soviet/20140818/).  
 
2) Для ссылок также следует добавить плавную смену цвета с transition. 
 
3) Так или иначе, здесь нужно предусмотреть overflow-y. Меню - потенциально динамический контент и при добавлении нового пункта его будет невозможно проктутить. https://i.imgur.com/oFQe8cl.png 
 
4) Семантически корректнее здесь будет использовать h3, т.к. это уже внутренность секции с h2 выше. https://i.imgur.com/994u27N.png 
 
5) Подобные проверки на length должны обязательно включать в себя trim. https://i.imgur.com/a22KHNV.png 
 
6) В ТЗ указано о недопустимости использования сторонних библиотек. https://i.imgur.com/py1fHQQ.png 
 
7) src/app.js: Непонятно, почему данная функция, которая обращается к DOM, вынесена вне события DOMContentloaded. https://i.imgur.com/6LkSlBn.png 
 
8) src/components/modal/index.js: Все вычисляемые поля рекомендуется класть в констуктор класса. https://i.imgur.com/j3ArcVD.png 
 
9) src/components/modal/index.js: Метод называется open, но принимает в себя событие и ведет себя как обработчик. Его невозможно переиспользовать или вызывать извне (то есть открыть модальное окно из другого скрипта). Рекомендуется ознакомиться с принципами SOLID. https://i.imgur.com/BwvngZD.png 
 
10) src/js/scrollManagement.js: Рекомендуется ознакомиться с корректным оформлением JSDoc (https://jsdoc.app/). https://i.imgur.com/psEPjtj.png 
 
11) src/components/form/index.js: Объект называется selectors, но по факту хранит data-атрибуты, а не css-селекторы. https://i.imgur.com/D05UCZP.png 
 
12) src/components/form/index.js: Подобные объекты лучше хранить с использованием Map. https://i.imgur.com/vunHfp9.png 
 
13) src/components/form/index.js: Одинаковые структуры кода, выполняющие одно и то же. Проблема в том, что метод, который должен возвращать только булево и проверять валидноcть поступающего выражения, еще и выводит ошибку. https://i.imgur.com/xFkl2CV.png 
 
14) src/components/form/index.js: Та же проблема с дублирующим функционалом. Это вполне можно объединить в один метод, принимающий флаг-булево. https://i.imgur.com/WbAQW5y.png 
 
15) src/components/form/index.js: Вроде класс называется FormValidator, но нигде нет простого метода, который позволил бы вернуть булю на проверку конкретной формы по ключу. Выглядит слишком переусложненно. https://i.imgur.com/ueuQGQa.png 
 
16) src/components/form/index.js: Это лишний функционал, formData корректно собирает всё сама из коробки и принимает форму как аргумент. https://i.imgur.com/TL4G1pr.png 
 
17) src/components/form/index.js: Опциональный аргумент метода, но при этом обязательно передается data. А что делать, если отправка через GET, где body в принципе отсутствует? https://i.imgur.com/jyR7NBq.png 
 
18) src/components/form/index.js: Лишняя проверка, по пустому массиву и так не будет итерации. https://i.imgur.com/IViECLs.png 
 
 
Верстка сделана удовлетворительно, хотя есть вопросы к некоторым визуальным решениям. Функционал реализован значительно хуже: классы спроектированы без учета потенциального переиспользования методов, некоторые операции излишне перегружены, игнорируется требование ТЗ о недопустимости наличия сторонних библиотек. К сожалению, качество JS кода не позволяет считать работу успешно выполненной.